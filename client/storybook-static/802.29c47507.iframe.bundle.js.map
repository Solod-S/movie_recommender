{"version":3,"file":"802.29c47507.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;;;;;AAaA;;;;;;;AC9BA","sources":["webpack://client/./src/components/MovieDetailModal/queries.js","webpack://client/./src/components/AuthModal/queries.js","webpack://client/./src/components/MovieCard/index.js","webpack://client/./src/components/Filters/index.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst MOVIE_DETAIL_BY_ID_QUERY = gql`\r\n  query MoviesByIds($ids: [Int]) {\r\n    moviesByIds(ids: $ids) {\r\n      releaseDate(format: \"dd MMM yyy\")\r\n      image: posterPath\r\n      title\r\n      id\r\n      adult\r\n      backdropPath\r\n      originalLanguage\r\n      originalTitle\r\n      overview\r\n      popularity\r\n      video\r\n      voteAverage\r\n      voteCount\r\n      genres {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst TRAILERS_BY_ID_QUERY = gql`\r\n  query TrailersById($id: Int) {\r\n    trailersById(id: $id) {\r\n      key\r\n      site\r\n      type\r\n    }\r\n  }\r\n`;\r\n\r\nconst CASTS_BY_ID_QUERY = gql`\r\n  query CreditsById($id: Int) {\r\n    creditsById(id: $id) {\r\n      adult\r\n      castId\r\n      character\r\n      creditId\r\n      gender\r\n      id\r\n      knownForDepartment\r\n      name\r\n      order\r\n      originalName\r\n      popularity\r\n      posterPath\r\n    }\r\n  }\r\n`;\r\n\r\nconst REVIEWS_BY_ID_QUERY = gql`\r\n  query Reviews($filter: ReviewsFilterInput!) {\r\n    reviews(filter: $filter) {\r\n      page\r\n      results {\r\n        author\r\n        authorDetails {\r\n          name\r\n          username\r\n          avatar_path\r\n          rating\r\n        }\r\n        content\r\n        createdAt\r\n        id\r\n        updatedAt\r\n        url\r\n      }\r\n      totalPages\r\n      totalResults\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  MOVIE_DETAIL_BY_ID_QUERY,\r\n  TRAILERS_BY_ID_QUERY,\r\n  CASTS_BY_ID_QUERY,\r\n  REVIEWS_BY_ID_QUERY,\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const LOGIN_MUTATION = gql`\r\n  mutation Login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      accessToken\r\n      refreshToken\r\n      user {\r\n        id\r\n        name\r\n        email\r\n        savedMovies {\r\n          id\r\n          title\r\n          releaseDate(format: \"dd.MM.yyyy\")\r\n          image\r\n          genres\r\n          adult\r\n          backdropPath\r\n          originalLanguage\r\n          originalTitle\r\n          overview\r\n          popularity\r\n          video\r\n          voteAverage\r\n          voteCount\r\n          userId\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SIGN_UP_MUTATION = gql`\r\n  mutation SignUp($email: String!, $password: String!, $name: String!) {\r\n    signUp(email: $email, password: $password, name: $name) {\r\n      accessToken\r\n      refreshToken\r\n      user {\r\n        id\r\n        name\r\n        email\r\n        savedMovies {\r\n          id\r\n          title\r\n          releaseDate(format: \"dd.MM.yyyy\")\r\n          image\r\n          genres\r\n          adult\r\n          backdropPath\r\n          originalLanguage\r\n          originalTitle\r\n          overview\r\n          popularity\r\n          video\r\n          voteAverage\r\n          voteCount\r\n          userId\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  MenuItem,\r\n  Tooltip,\r\n  styled,\r\n} from \"@mui/material\";\r\n\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nimport {\r\n  MdOutlineFavoriteBorder,\r\n  // MdFavoriteBorder,\r\n  MdOutlineBookmarkAdded,\r\n} from \"react-icons/md\";\r\n\r\nimport { SiImdb } from \"react-icons/si\";\r\n// import { TbSelect } from \"react-icons/tb\";\r\n\r\nimport CardMenu from \"../CardMenu\";\r\nimport DefaultPoster from \"../../assets/poster.jpg\";\r\nimport Loader from \"../Loader\";\r\n\r\nexport const MoviesRating = styled(({ movieRating, ...other }) => (\r\n  <Box {...other} />\r\n))`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 2%;\r\n  left: 2%;\r\n  padding: 4px 8px;\r\n  font-weight: 600;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  background-color: ${({ movieRating }) => {\r\n    if (movieRating > 6) {\r\n      return \"#55ff00b0\";\r\n    }\r\n    if (movieRating >= 4 && movieRating <= 6) {\r\n      return \"#ffcb2f70\";\r\n    }\r\n    return \"#ff00009c\";\r\n  }};\r\n  border-radius: 8px;\r\n  color: #000;\r\n  font-size: 1rem;\r\n  line-height: 1;\r\n`;\r\n\r\nconst truncateString = (string, length = 35) => {\r\n  if (string.length >= length) {\r\n    return string.substring(0, length - 3) + \"...\";\r\n  }\r\n  return string;\r\n};\r\n\r\nconst MovieCard = ({\r\n  movie,\r\n  onCardSelect,\r\n  isPreviewMode = false,\r\n  openMovieDetailsById = () => {},\r\n  movieCardIsLoading = false,\r\n  selected = false,\r\n  favorites = false,\r\n}) => {\r\n  const menuRef = useRef();\r\n\r\n  const callhandleClose = () => {\r\n    if (menuRef.current) {\r\n      menuRef.current.handleClose();\r\n    }\r\n  };\r\n\r\n  const handleMovieDetails = movie => {\r\n    openMovieDetailsById(movie.movieId || movie.id);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        position: \"relative\",\r\n        transition: \"transform 0.3s ease\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n          transform: \"scale(1.03)\",\r\n        },\r\n      }}\r\n      onClick={event => {\r\n        if (\r\n          event.target.closest(\".MuiButtonBase-root\") ||\r\n          document.querySelector(\".MuiList-padding.MuiMenu-list\")\r\n        ) {\r\n          return;\r\n        }\r\n        handleMovieDetails(movie);\r\n      }}\r\n    >\r\n      {selected && (\r\n        <Tooltip\r\n          title={<span style={{ fontSize: \"15px\" }}>Selected</span>}\r\n          placement=\"top\"\r\n          sx={{\r\n            position: \"absolute\",\r\n            bottom: 5,\r\n            right: 5,\r\n            zIndex: 1,\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          <Box component=\"span\">\r\n            <MdOutlineBookmarkAdded color=\"#FF6700\" size={25} />\r\n          </Box>\r\n        </Tooltip>\r\n      )}\r\n      {favorites && (\r\n        <Tooltip\r\n          title={<span style={{ fontSize: \"15px\" }}>Favorite</span>}\r\n          placement=\"top\"\r\n          sx={{\r\n            position: \"absolute\",\r\n            bottom: 5,\r\n            left: 5,\r\n            zIndex: 1,\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          <Box component=\"span\">\r\n            <MdOutlineFavoriteBorder color=\"#FF6700\" size={25} />\r\n          </Box>\r\n        </Tooltip>\r\n      )}\r\n      {!isPreviewMode && (\r\n        <CardMenu ref={menuRef}>\r\n          <MenuItem\r\n            onClick={() => {\r\n              callhandleClose();\r\n              setTimeout(() => {\r\n                onCardSelect(movie);\r\n              }, 100);\r\n            }}\r\n          >\r\n            {/* <TbSelect />\r\n            &nbsp; */}\r\n            <FormattedMessage id=\"addToSelected\" />\r\n          </MenuItem>\r\n          {/* <MenuItem\r\n            onClick={() => {\r\n              callhandleClose();\r\n              setTimeout(() => {\r\n                onCardSelect(movie);\r\n              }, 100);\r\n            }}\r\n          >\r\n            <MdFavoriteBorder />\r\n            &nbsp;\r\n            <FormattedMessage id=\"addToFavorite\" />\r\n          </MenuItem> */}\r\n        </CardMenu>\r\n      )}\r\n      {movieCardIsLoading && <Loader cardLoader />}\r\n      <MoviesRating movieRating={Math.round(movie.voteAverage || 0)}>\r\n        <SiImdb size={25} style={{ marginRight: \"4px\" }} />{\" \"}\r\n        <span>{Math.round(movie.voteAverage || 0)}</span>\r\n      </MoviesRating>\r\n\r\n      <CardMedia\r\n        component=\"img\"\r\n        image={!movie.image ? DefaultPoster : movie.image}\r\n        alt={movie.title}\r\n        style={{ height: \"431px\" }}\r\n        // onClick={() => handleMovieDetails(movie)}\r\n      />\r\n      <CardContent style={{ paddingBottom: \"16px\", height: \"150px\" }}>\r\n        {movie.title.length > 35 ? (\r\n          <Tooltip title={movie.title} arrow>\r\n            <Typography variant=\"h5\" gutterBottom component=\"div\">\r\n              {truncateString(movie.title, 35)}\r\n            </Typography>\r\n          </Tooltip>\r\n        ) : (\r\n          <Typography variant=\"h5\" gutterBottom component=\"div\">\r\n            {movie.title}\r\n          </Typography>\r\n        )}\r\n        <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n          {movie.releaseDate}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nMovieCard.protoTypes = {\r\n  movie: PropTypes.shape({\r\n    image: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    releaseDate: PropTypes.string,\r\n  }).isRequired,\r\n  onCardSelect: PropTypes.func.isRequired,\r\n  isPreviewMode: PropTypes.bool.isRequired,\r\n  openMovieDetailsById: PropTypes.func.isRequired,\r\n  selected: PropTypes.bool,\r\n  favorites: PropTypes.bool,\r\n  isPreviewMode: PropTypes.bool,\r\n};\r\n\r\nexport default MovieCard;\r\n","import React, { useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  Paper,\r\n  MenuItem,\r\n  Box,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n  TextField,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@mui/icons-material/ArrowDownward\";\r\n\r\nimport { Form, Field } from \"react-final-form\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_GENRES_QUERY } from \"./queries\";\r\n\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst Filters = ({ initialValues, onSubmit, years }) => {\r\n  const {\r\n    // loading, error,\r\n    data: genres,\r\n  } = useQuery(GET_GENRES_QUERY);\r\n\r\n  // Debounced function for form submission\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const debouncedSubmit = useCallback(\r\n    debounce(values => {\r\n      onSubmit(values);\r\n    }, 300),\r\n    [onSubmit]\r\n  );\r\n\r\n  return (\r\n    <Paper style={{ padding: \"10px\" }}>\r\n      <Form\r\n        onSubmit={onSubmit}\r\n        initialValues={initialValues}\r\n        render={({ handleSubmit, form, values }) => {\r\n          const handleChange = name => event => {\r\n            form.change(name, event.target.value);\r\n            if (name === \"sortBy\" && event.target.value === \"\") {\r\n              form.change(\"sortDirection\", \"asc\"); // Default to ascending if \"Sort By\" is default\r\n            }\r\n            form.submit();\r\n          };\r\n\r\n          // Handle search input change with debounced submit\r\n          const handleSearchChange = event => {\r\n            form.change(\"search\", event.target.value);\r\n            debouncedSubmit(form.getState().values);\r\n          };\r\n\r\n          // Toggle between ascending and descending order\r\n          const toggleSortDirection = () => {\r\n            const newOrder = values.sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n            form.change(\"sortDirection\", newOrder);\r\n            form.submit();\r\n          };\r\n\r\n          // Disable other fields if search value is greater than 0\r\n          const disableFields = values.search.length > 0;\r\n\r\n          return (\r\n            <form onSubmit={handleSubmit}>\r\n              <Box\r\n                display=\"flex\"\r\n                flexWrap=\"wrap\"\r\n                flexDirection=\"row\"\r\n                gap=\"20px\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <div>\r\n                  <TextField\r\n                    value={values.search || \"\"}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    label={<FormattedMessage id=\"filters.search.label\" />}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    onChange={handleSearchChange}\r\n                    inputProps={{\r\n                      style: {\r\n                        padding: \"7px\",\r\n                        textAlign: \"center\",\r\n                        minWidth: \"320px\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n                <Box\r\n                  display=\"flex\"\r\n                  flexWrap=\"wrap\"\r\n                  gap=\"20px\"\r\n                  flexDirection=\"row\"\r\n                  alignItems=\"center\"\r\n                  style={{\r\n                    opacity: disableFields ? 0.4 : 1,\r\n                    pointerEvents: disableFields ? \"none\" : \"auto\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    <FormControl fullWidth style={{ minWidth: \"120px\" }}>\r\n                      <InputLabel shrink>\r\n                        <FormattedMessage id=\"filters.genre.label\" />\r\n                      </InputLabel>\r\n                      <Field name=\"genre\">\r\n                        {({ input }) => (\r\n                          <Select\r\n                            {...input}\r\n                            value={input.value || \"\"}\r\n                            label={\r\n                              <FormattedMessage id=\"filters.genre.label\" />\r\n                            }\r\n                            displayEmpty\r\n                            onChange={handleChange(\"genre\")}\r\n                            inputProps={{\r\n                              style: { padding: \"7px\" },\r\n                            }}\r\n                            MenuProps={{\r\n                              PaperProps: {\r\n                                style: { padding: \"0px\" },\r\n                              },\r\n                            }}\r\n                            sx={{\r\n                              \".MuiSelect-select\": {\r\n                                padding: \"7px\",\r\n                              },\r\n                            }}\r\n                            disabled={disableFields}\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>\r\n                                <FormattedMessage id=\"filters.genre.allGenres\" />\r\n                              </em>\r\n                            </MenuItem>\r\n                            {genres &&\r\n                              genres.genres.length > 0 &&\r\n                              genres.genres.map(genre => {\r\n                                return (\r\n                                  <MenuItem key={genre.id} value={genre.id}>\r\n                                    {genre.name}\r\n                                  </MenuItem>\r\n                                );\r\n                              })}\r\n                          </Select>\r\n                        )}\r\n                      </Field>\r\n                    </FormControl>\r\n                  </div>\r\n                  <div>\r\n                    <FormControl fullWidth style={{ minWidth: \"120px\" }}>\r\n                      <InputLabel shrink>\r\n                        <FormattedMessage id=\"filters.year.label\" />\r\n                      </InputLabel>\r\n                      <Field name=\"year\">\r\n                        {({ input }) => (\r\n                          <Select\r\n                            {...input}\r\n                            value={input.value || \"\"}\r\n                            label={<FormattedMessage id=\"filters.year.label\" />}\r\n                            displayEmpty\r\n                            onChange={handleChange(\"year\")}\r\n                            inputProps={{\r\n                              style: { padding: \"7px\" },\r\n                            }}\r\n                            MenuProps={{\r\n                              PaperProps: {\r\n                                style: { padding: \"0px\" },\r\n                              },\r\n                            }}\r\n                            sx={{\r\n                              \".MuiSelect-select\": {\r\n                                padding: \"7px\",\r\n                              },\r\n                            }}\r\n                            disabled={disableFields}\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>\r\n                                <FormattedMessage id=\"filters.year.allYears\" />\r\n                              </em>\r\n                            </MenuItem>\r\n                            {years.map(year => (\r\n                              <MenuItem key={year} value={year}>\r\n                                {year}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        )}\r\n                      </Field>\r\n                    </FormControl>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <FormControl fullWidth style={{ minWidth: \"150px\" }}>\r\n                      <InputLabel shrink>\r\n                        <FormattedMessage id=\"filters.sortBy.label\" />\r\n                      </InputLabel>\r\n                      <Field name=\"sortBy\">\r\n                        {({ input }) => (\r\n                          <Select\r\n                            {...input}\r\n                            value={input.value || \"\"}\r\n                            label={\r\n                              <FormattedMessage id=\"filters.sortBy.label\" />\r\n                            }\r\n                            displayEmpty\r\n                            onChange={handleChange(\"sortBy\")}\r\n                            inputProps={{\r\n                              style: { padding: \"7px\" },\r\n                            }}\r\n                            MenuProps={{\r\n                              PaperProps: {\r\n                                style: { padding: \"0px\" },\r\n                              },\r\n                            }}\r\n                            sx={{\r\n                              \".MuiSelect-select\": {\r\n                                padding: \"7px\",\r\n                              },\r\n                            }}\r\n                            disabled={disableFields}\r\n                          >\r\n                            <MenuItem value=\"popularity\">\r\n                              <FormattedMessage id=\"filters.sortBy.popularity\" />\r\n                            </MenuItem>\r\n                            <MenuItem value=\"release_date\">\r\n                              <FormattedMessage id=\"filters.sortBy.releaseDate\" />\r\n                            </MenuItem>\r\n                            <MenuItem value=\"original_title\">\r\n                              <FormattedMessage id=\"filters.sortBy.title\" />\r\n                            </MenuItem>\r\n                            <MenuItem value=\"vote_average\">\r\n                              <FormattedMessage id=\"filters.sortBy.voteAverage\" />\r\n                            </MenuItem>\r\n                            <MenuItem value=\"vote_count\">\r\n                              <FormattedMessage id=\"filters.sortBy.voteCount\" />\r\n                            </MenuItem>\r\n                          </Select>\r\n                        )}\r\n                      </Field>\r\n                    </FormControl>\r\n                  </div>\r\n                  {/* Toggle for ascending/descending order */}\r\n                  <IconButton\r\n                    onClick={toggleSortDirection}\r\n                    disabled={values.sortBy === \"\" || disableFields} // Disable button if \"Sort By\" is default or search is active\r\n                  >\r\n                    {values.sortDirection === \"asc\" ? (\r\n                      <ArrowUpwardIcon />\r\n                    ) : (\r\n                      <ArrowDownwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Box>\r\n              </Box>\r\n            </form>\r\n          );\r\n        }}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nFilters.propTypes = {\r\n  initialValues: PropTypes.shape({\r\n    page: PropTypes.number.isRequired,\r\n    sortBy: PropTypes.oneOf([\r\n      \"popularity\",\r\n      \"release_date\",\r\n      \"original_title\",\r\n      \"vote_average\",\r\n      \"vote_count\",\r\n    ]).isRequired,\r\n    sortDirection: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n    search: PropTypes.string.isRequired,\r\n    genre: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf([null])]),\r\n    year: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf([null])]),\r\n    primaryReleaseYear: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.oneOf([null]),\r\n    ]),\r\n  }).isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  years: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n};\r\n\r\nexport default Filters;\r\n"],"names":[],"sourceRoot":""}