{"version":3,"file":"static/js/908.8a2f173c.chunk.js","mappings":"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","sources":["config/index.js","hooks/useMovies/index.js","hooks/useSavedMovies/queries.js","hooks/useSavedMovies/index.js","pages/Home/queries.js","pages/Home/index.js","hooks/useFilters/index.js","utils/renderSkeletons.js"],"sourcesContent":["export const SELECTED_MOVIES_LIMIT = 12;\n","import { useCallback, useLayoutEffect, useState } from \"react\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport { saveToStorage, getFromStorage } from \"../../utils/localStorage\";\nimport { SELECTED_MOVIES_KEY } from \"../../constants\";\n\nexport const useMovies = () => {\n  const [selectedMovies, setSelectedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    const savedSelectedMovies = getFromStorage(SELECTED_MOVIES_KEY);\n    if (savedSelectedMovies) {\n      setSelectedMovies(savedSelectedMovies);\n    }\n  }, []);\n\n  const selectMovie = useCallback(\n    movie => {\n      const length = selectedMovies.length;\n      const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n      if (isNewMovie && length < SELECTED_MOVIES_LIMIT) {\n        setSelectedMovies(prevMovies => {\n          const updatedMovies = [...prevMovies, movie];\n          saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n          return updatedMovies;\n        });\n      }\n    },\n    [selectedMovies]\n  );\n\n  const deleteMovie = useCallback(\n    movie => {\n      setSelectedMovies(prevState => {\n        const updatedMovies = prevState.filter(({ id }) => id !== movie.id);\n        saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n        return updatedMovies;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selectedMovies]\n  );\n\n  return {\n    selectedMovies,\n    selectMovie,\n    deleteMovie,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int, $all: Boolean) {\n    getSavedMovies(page: $page, all: $all) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n  mutation SaveMovie($movie: MovieInput!) {\n    saveMovie(movie: $movie) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n      voteAverage\n      voteCount\n    }\n  }\n`;\n\nexport const REMOVE_MOVIE = gql`\n  mutation RemoveMovie($id: ID!) {\n    removeMovie(id: $id) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n    }\n  }\n`;\n","import { useContext, useLayoutEffect, useState } from \"react\"; // React hooks\nimport { AppContext } from \"../../providers/appContext\"; // Context provider\nimport { useMutation, useQuery } from \"@apollo/client\"; // Apollo Client hooks\nimport { GET_SAVED_MOVIES, SAVE_MOVIE, REMOVE_MOVIE } from \"./queries\"; // GraphQL queries\n\nexport const useSavedMovies = () => {\n  const { state } = useContext(AppContext);\n  const [savedMoviesLoading, setSavedMoviesLoading] = useState(false);\n  const [saveMovie] = useMutation(SAVE_MOVIE);\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page: 1, all: true },\n    // skip: true, // Изначально пропускаем запрос\n    // onError: async error => {\n    //   console.log(`Error loading`, error);\n    // },\n  });\n  const [removeMovie] = useMutation(REMOVE_MOVIE);\n  const [savedMovies, setSavedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    if (state.user) {\n      // Если пользователь существует, запускаем refetch для получения данных\n      refetch();\n    }\n  }, [state.user, refetch]);\n\n  useLayoutEffect(() => {\n    if (data && data?.getSavedMovies) {\n      setSavedMovies(data.getSavedMovies.results); // Устанавливаем фильмы, когда есть данные\n    }\n  }, [data]);\n\n  const addMovieToSaved = async movie => {\n    // console.log(`movie!!!!`, movie);\n    setSavedMoviesLoading(true);\n    const isNewMovie = !savedMovies.find(({ id }) => id === movie.id);\n\n    if (isNewMovie) {\n      setSavedMovies(prevMovies => {\n        const updatedMovies = [...prevMovies, { ...movie, movieId: movie.id }];\n        return updatedMovies;\n      });\n\n      try {\n        const movieObj = {\n          id: movie.id,\n          title: movie.title,\n          releaseDate: movie.releaseDate,\n          image: movie.image || \"\",\n          genres: movie?.genres?.map(m => m.id) || [],\n          adult: movie.adult || false,\n          backdropPath: movie.backdropPath || \"\",\n          originalLanguage: movie.originalLanguage || \"\",\n          originalTitle: movie.originalTitle || \"\",\n          overview: movie.overview || \"\",\n          popularity: movie.popularity || 0,\n          video: movie.video || false,\n          voteAverage: movie.voteAverage || 0,\n          voteCount: movie.voteCount || 0,\n        };\n\n        await saveMovie({\n          variables: {\n            movie: movieObj,\n          },\n        });\n\n        return true;\n      } catch (error) {\n        console.error(\"Error saving movie:\", error);\n        return false;\n      } finally {\n        setSavedMoviesLoading(false);\n      }\n    }\n  };\n\n  const removeMovieFromSaved = async movie => {\n    // console.log(`movie---`, movie);\n    setSavedMoviesLoading(true);\n    try {\n      await removeMovie({\n        variables: {\n          id: movie.id,\n        },\n      });\n      setSavedMovies(prevMovies => {\n        const updatedMovies = prevMovies.filter(m => {\n          const movieIdCheck = m.movieId\n            ? String(m.movieId) !== String(movie.id)\n            : true;\n          return String(m.id) !== String(movie.id) && movieIdCheck;\n        });\n\n        return updatedMovies;\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error removing movie:\", error);\n      return false;\n    } finally {\n      setSavedMoviesLoading(false);\n    }\n  };\n\n  return {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n    loading,\n    error,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const MOVIES_QUERY = gql`\n  query Movies($filter: MoviesFilterInput) {\n    movies(filter: $filter) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        title\n        image: posterPath\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n","import { useEffect, useState, useContext } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport { useQuery } from \"@apollo/client\";\nimport { MOVIES_QUERY } from \"./queries\";\n\nimport {\n  MovieCard,\n  SelectedMoviesSection,\n  Filters,\n  Paginator,\n  MovieDetailModal,\n  ServerError,\n} from \"../../components\";\n\nimport { useMovies } from \"../../hooks/useMovies\";\nimport { useCustomNotification } from \"../../hooks/useCustomNotification\";\nimport { useFilters } from \"../../hooks/useFilters\";\nimport { useSavedMovies } from \"../../hooks/useSavedMovies\";\n\nimport { AppContext } from \"../../providers/appContext\";\nimport { framerListVariants } from \"../../constants\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport renderSkeletons from \"../../utils/renderSkeletons\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst genres = [\n  // {\n  //   id: null,\n  //   name: \"All Genres\",\n  // },\n  {\n    id: 28,\n    name: \"Action\",\n  },\n  {\n    id: 12,\n    name: \"Adventure\",\n  },\n  {\n    id: 16,\n    name: \"Animation\",\n  },\n  {\n    id: 35,\n    name: \"Comedy\",\n  },\n  {\n    id: 80,\n    name: \"Crime\",\n  },\n  {\n    id: 99,\n    name: \"Documentary\",\n  },\n  {\n    id: 18,\n    name: \"Drama\",\n  },\n  {\n    id: 10751,\n    name: \"Family\",\n  },\n  {\n    id: 14,\n    name: \"Fantasy\",\n  },\n  {\n    id: 36,\n    name: \"History\",\n  },\n  {\n    id: 27,\n    name: \"Horror\",\n  },\n  {\n    id: 10402,\n    name: \"Music\",\n  },\n  {\n    id: 9648,\n    name: \"Mystery\",\n  },\n  {\n    id: 10749,\n    name: \"Romance\",\n  },\n  {\n    id: 878,\n    name: \"Science Fiction\",\n  },\n  {\n    id: 10770,\n    name: \"TV Movie\",\n  },\n  {\n    id: 53,\n    name: \"Thriller\",\n  },\n  {\n    id: 10752,\n    name: \"War\",\n  },\n  {\n    id: 37,\n    name: \"Western\",\n  },\n];\n\nconst startYear = 1900;\nconst currentYear = new Date().getFullYear();\nconst years = Array.from(\n  { length: currentYear - startYear + 1 },\n  (_, i) => currentYear - i\n);\n\nconst Home = () => {\n  const {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n  } = useSavedMovies();\n\n  const { state } = useContext(AppContext);\n  const { filter, setPage, setFilter } = useFilters();\n  const { selectedMovies, selectMovie, deleteMovie } = useMovies();\n  const [movieId, setMovieId] = useState(\"\");\n\n  const [moviesList, setMoviesList] = useState([]);\n  const [movieCardIsLoading, setMovieCardIsLoading] = useState(false);\n  const { showNotification, NotificationComponent } = useCustomNotification();\n  const { loading, error, data } = useQuery(MOVIES_QUERY, {\n    variables: {\n      filter: {\n        page: filter.page,\n        sortBy: filter.sortBy,\n        sortDirection: filter.sortDirection,\n        year: filter.year,\n        genre: filter.genre,\n        search: filter.search,\n      },\n    },\n  });\n\n  useEffect(() => {\n    if (data?.movies?.results?.length > 0)\n      setMoviesList(prevState => {\n        return data.movies.results.map(newMovie => {\n          const oldMovie = prevState.find(movie => movie.id === newMovie.id);\n\n          return {\n            ...newMovie,\n            image: oldMovie ? oldMovie.image : newMovie.image,\n          };\n        });\n      });\n    else setMoviesList([]);\n  }, [data]);\n\n  const addFavoriteMovie = async movie => {\n    const result = await addMovieToSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in saving movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_add_to_favorite_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const removeFavoriteMovie = async movie => {\n    const result = await removeMovieFromSaved(movie);\n    if (!result) {\n      showNotification(\"Error in removing movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const paginationHandler = (event, page) => {\n    setPage(page);\n    setTimeout(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\",\n      });\n    }, 100);\n  };\n\n  const selectMovieHandler = movie => {\n    const length = selectedMovies.length;\n    const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n    switch (true) {\n      case !isNewMovie:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_already_selected\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      case length >= SELECTED_MOVIES_LIMIT:\n        showNotification(\n          <FormattedMessage id=\"notification.list_limit_reached\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_added_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    selectMovie(movie);\n  };\n\n  const deleteMovieHandler = movie => {\n    switch (true) {\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    deleteMovie(movie);\n  };\n\n  const handleFilterSubmit = values => {\n    setFilter(values);\n  };\n\n  const onCloseConfirmModal = () => {\n    setMovieId(\"\");\n  };\n\n  if (error) {\n    console.log(`error in home page: ${error}`);\n    return <ServerError />;\n  }\n  return (\n    <Box sx={{ flexGrow: 1, marginTop: 2 }}>\n      <MovieDetailModal\n        user={state.user || null}\n        title={movieId}\n        movieId={movieId}\n        setMovieCardIsLoading={setMovieCardIsLoading}\n        open={!!movieId}\n        onClose={onCloseConfirmModal}\n        selectedMovies={selectedMovies}\n        selectMovie={selectMovieHandler}\n        deleteMovie={deleteMovieHandler}\n        addFavoriteMovie={addFavoriteMovie}\n        removeFavoriteMovie={removeFavoriteMovie}\n        savedMovies={savedMovies}\n        savedMoviesLoading={savedMoviesLoading}\n      />\n\n      {NotificationComponent}\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Filters\n            initialValues={filter}\n            onSubmit={handleFilterSubmit}\n            genres={genres}\n            years={years}\n          />\n        </Grid>\n        <Grid item xs={12} md={8}>\n          <Paper>\n            <Box sx={{ flexGrow: 1, padding: 2 }}>\n              {loading && renderSkeletons({ favoriteMode: false })}\n              {moviesList && moviesList.length > 0 && (\n                <Grid container spacing={2}>\n                  {moviesList.map((movie, index) => (\n                    <Grid key={movie.id} item xs={12} md={4} lg={3}>\n                      <motion.div\n                        className=\"portfolio__item\"\n                        variants={framerListVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        custom={index}\n                      >\n                        <MovieCard\n                          movie={movie}\n                          onCardSelect={selectMovieHandler}\n                          movieCardIsLoading={movieCardIsLoading}\n                          openMovieDetailsById={setMovieId}\n                          selected={selectedMovies.find(\n                            ({ id }) => id === movie.id\n                          )}\n                          favorites={savedMovies.find(\n                            ({ id, movieId }) =>\n                              id === movie.id || movie.id === movieId\n                          )}\n                        />\n                      </motion.div>\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n            </Box>\n            <Box\n              mt={2}\n              pb={2}\n              sx={{ display: \"flex\", justifyContent: \"center\" }}\n            >\n              <Paginator\n                totalPages={\n                  Number(data?.movies?.totalPages) > 500\n                    ? 500\n                    : data?.movies?.totalPages || 1\n                }\n                page={filter.page}\n                paginationHandler={paginationHandler}\n              />\n            </Box>\n          </Paper>\n        </Grid>\n\n        <Grid key=\"Selected Movie\" item xs={12} md={4}>\n          <SelectedMoviesSection\n            selectedMovies={selectedMovies}\n            onCardDelete={deleteMovieHandler}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Home;\n","import { useCallback, useState } from \"react\";\nimport { SORT_DIRECTION } from \"../../constants\";\n\nexport const useFilters = () => {\n  const [filter, setFilterFields] = useState({\n    page: 1,\n    sortBy: \"popularity\",\n    sortDirection: SORT_DIRECTION.DESC,\n    search: \"\",\n  });\n\n  const setPage = useCallback(\n    page => {\n      setFilterFields({ ...filter, page });\n    },\n    [filter]\n  );\n\n  const setFilter = useCallback(\n    filterFields => {\n      setFilterFields({\n        ...filter,\n        ...filterFields,\n        page:\n          filter.search !== filterFields.search ||\n          filter.genre !== filterFields.genre ||\n          filter.year !== filterFields.year\n            ? 1\n            : filterFields.page,\n        year: +filterFields.year,\n        genre: filterFields.genre === \"\" ? NaN : filterFields.genre,\n        primaryReleaseYear: +filterFields.primaryReleaseYear,\n      });\n    },\n    [filter]\n  );\n  return {\n    filter,\n    setPage,\n    setFilter,\n  };\n};\n","import { Grid, Skeleton } from \"@mui/material\";\n\nconst renderSkeletons = ({ favoriteMode = false }) => {\n  return (\n    <Grid container spacing={2}>\n      {Array.from(new Array(8)).map((_, index) => (\n        <Grid\n          key={index}\n          item\n          xs={12}\n          md={favoriteMode ? 3 : 4}\n          lg={favoriteMode ? 2 : 3}\n        >\n          <Skeleton variant=\"rectangular\" height={431} />\n          <Skeleton variant=\"text\" height={32} />\n          <Skeleton variant=\"text\" height={32} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default renderSkeletons;\n"],"names":["SELECTED_MOVIES_LIMIT","useMovies","selectedMovies","setSelectedMovies","useState","useLayoutEffect","savedSelectedMovies","getFromStorage","SELECTED_MOVIES_KEY","selectMovie","useCallback","movie","length","find","_ref","id","prevMovies","updatedMovies","saveToStorage","deleteMovie","prevState","filter","_ref2","GET_SAVED_MOVIES","gql","SAVE_MOVIE","REMOVE_MOVIE","useSavedMovies","state","useContext","AppContext","savedMoviesLoading","setSavedMoviesLoading","saveMovie","useMutation","loading","error","data","refetch","useQuery","variables","page","all","removeMovie","savedMovies","setSavedMovies","user","getSavedMovies","results","addMovieToSaved","async","movieId","_movie$genres","movieObj","title","releaseDate","image","genres","map","m","adult","backdropPath","originalLanguage","originalTitle","overview","popularity","video","voteAverage","voteCount","console","removeMovieFromSaved","movieIdCheck","String","MOVIES_QUERY","name","currentYear","Date","getFullYear","years","Array","from","_","i","Home","_data$movies2","_data$movies3","setPage","setFilter","useFilters","setFilterFields","sortBy","sortDirection","SORT_DIRECTION","DESC","search","filterFields","genre","year","NaN","primaryReleaseYear","setMovieId","moviesList","setMoviesList","movieCardIsLoading","setMovieCardIsLoading","showNotification","NotificationComponent","useCustomNotification","useEffect","_data$movies","_data$movies$results","movies","newMovie","oldMovie","selectMovieHandler","_jsx","FormattedMessage","vertical","horizontal","deleteMovieHandler","log","ServerError","_jsxs","Box","sx","flexGrow","marginTop","children","MovieDetailModal","open","onClose","onCloseConfirmModal","addFavoriteMovie","removeFavoriteMovie","Grid","container","spacing","item","xs","Filters","initialValues","onSubmit","values","md","Paper","padding","renderSkeletons","favoriteMode","index","lg","motion","div","className","variants","framerListVariants","initial","animate","custom","MovieCard","onCardSelect","openMovieDetailsById","selected","favorites","_ref3","mt","pb","display","justifyContent","Paginator","totalPages","Number","paginationHandler","event","setTimeout","window","scrollTo","top","behavior","SelectedMoviesSection","onCardDelete","Skeleton","variant","height"],"sourceRoot":""}