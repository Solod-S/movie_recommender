{"version":3,"file":"static/js/81.d8d2a658.chunk.js","mappings":"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","sources":["config/index.js","hooks/useMovies/index.js","hooks/useSavedMovies/queries.js","hooks/useSavedMovies/index.js","pages/Favorites/queries.js","pages/Favorites/index.js","utils/renderSkeletons.js"],"sourcesContent":["export const SELECTED_MOVIES_LIMIT = 12;\n","import { useCallback, useLayoutEffect, useState } from \"react\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport { saveToStorage, getFromStorage } from \"../../utils/localStorage\";\nimport { SELECTED_MOVIES_KEY } from \"../../constants\";\n\nexport const useMovies = () => {\n  const [selectedMovies, setSelectedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    const savedSelectedMovies = getFromStorage(SELECTED_MOVIES_KEY);\n    if (savedSelectedMovies) {\n      setSelectedMovies(savedSelectedMovies);\n    }\n  }, []);\n\n  const selectMovie = useCallback(\n    movie => {\n      const length = selectedMovies.length;\n      const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n      if (isNewMovie && length < SELECTED_MOVIES_LIMIT) {\n        setSelectedMovies(prevMovies => {\n          const updatedMovies = [...prevMovies, movie];\n          saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n          return updatedMovies;\n        });\n      }\n    },\n    [selectedMovies]\n  );\n\n  const deleteMovie = useCallback(\n    movie => {\n      setSelectedMovies(prevState => {\n        const updatedMovies = prevState.filter(({ id }) => id !== movie.id);\n        saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n        return updatedMovies;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selectedMovies]\n  );\n\n  return {\n    selectedMovies,\n    selectMovie,\n    deleteMovie,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int, $all: Boolean) {\n    getSavedMovies(page: $page, all: $all) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n  mutation SaveMovie($movie: MovieInput!) {\n    saveMovie(movie: $movie) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n      voteAverage\n      voteCount\n    }\n  }\n`;\n\nexport const REMOVE_MOVIE = gql`\n  mutation RemoveMovie($id: ID!) {\n    removeMovie(id: $id) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n    }\n  }\n`;\n","import { useContext, useLayoutEffect, useState } from \"react\"; // React hooks\nimport { AppContext } from \"../../providers/appContext\"; // Context provider\nimport { useMutation, useQuery } from \"@apollo/client\"; // Apollo Client hooks\nimport { GET_SAVED_MOVIES, SAVE_MOVIE, REMOVE_MOVIE } from \"./queries\"; // GraphQL queries\n\nexport const useSavedMovies = () => {\n  const { state } = useContext(AppContext);\n  const [savedMoviesLoading, setSavedMoviesLoading] = useState(false);\n  const [saveMovie] = useMutation(SAVE_MOVIE);\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page: 1, all: true },\n    // skip: true, // Изначально пропускаем запрос\n    // onError: async error => {\n    //   console.log(`Error loading`, error);\n    // },\n  });\n  const [removeMovie] = useMutation(REMOVE_MOVIE);\n  const [savedMovies, setSavedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    if (state.user) {\n      // Если пользователь существует, запускаем refetch для получения данных\n      refetch();\n    }\n  }, [state.user, refetch]);\n\n  useLayoutEffect(() => {\n    if (data && data?.getSavedMovies) {\n      setSavedMovies(data.getSavedMovies.results); // Устанавливаем фильмы, когда есть данные\n    }\n  }, [data]);\n\n  const addMovieToSaved = async movie => {\n    // console.log(`movie!!!!`, movie);\n    setSavedMoviesLoading(true);\n    const isNewMovie = !savedMovies.find(({ id }) => id === movie.id);\n\n    if (isNewMovie) {\n      setSavedMovies(prevMovies => {\n        const updatedMovies = [...prevMovies, { ...movie, movieId: movie.id }];\n        return updatedMovies;\n      });\n\n      try {\n        const movieObj = {\n          id: movie.id,\n          title: movie.title,\n          releaseDate: movie.releaseDate,\n          image: movie.image || \"\",\n          genres: movie?.genres?.map(m => m.id) || [],\n          adult: movie.adult || false,\n          backdropPath: movie.backdropPath || \"\",\n          originalLanguage: movie.originalLanguage || \"\",\n          originalTitle: movie.originalTitle || \"\",\n          overview: movie.overview || \"\",\n          popularity: movie.popularity || 0,\n          video: movie.video || false,\n          voteAverage: movie.voteAverage || 0,\n          voteCount: movie.voteCount || 0,\n        };\n\n        await saveMovie({\n          variables: {\n            movie: movieObj,\n          },\n        });\n\n        return true;\n      } catch (error) {\n        console.error(\"Error saving movie:\", error);\n        return false;\n      } finally {\n        setSavedMoviesLoading(false);\n      }\n    }\n  };\n\n  const removeMovieFromSaved = async movie => {\n    // console.log(`movie---`, movie);\n    setSavedMoviesLoading(true);\n    try {\n      await removeMovie({\n        variables: {\n          id: movie.id,\n        },\n      });\n      setSavedMovies(prevMovies => {\n        const updatedMovies = prevMovies.filter(m => {\n          const movieIdCheck = m.movieId\n            ? String(m.movieId) !== String(movie.id)\n            : true;\n          return String(m.id) !== String(movie.id) && movieIdCheck;\n        });\n\n        return updatedMovies;\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error removing movie:\", error);\n      return false;\n    } finally {\n      setSavedMoviesLoading(false);\n    }\n  };\n\n  return {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n    loading,\n    error,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int) {\n    getSavedMovies(page: $page, perPage: 12) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n","import { useEffect, useState, useContext } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_SAVED_MOVIES } from \"./queries\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\nimport {\n  MovieCard,\n  MovieDetailModal,\n  Paginator,\n  ServerError,\n} from \"../../components\";\nimport renderSkeletons from \"../../utils/renderSkeletons\";\nimport { framerListVariants } from \"../../constants\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { useMovies } from \"../../hooks/useMovies\";\nimport { useCustomNotification } from \"../../hooks/useCustomNotification\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport { useSavedMovies } from \"../../hooks/useSavedMovies\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst Favorites = () => {\n  const { state } = useContext(AppContext);\n  const [movieId, setMovieId] = useState(\"\");\n  const [movieCardIsLoading, setMovieCardIsLoading] = useState(false);\n  const [moviesList, setMoviesList] = useState([]);\n  const [page, setPage] = useState(1);\n  const [boxMinHeight, setBoxMinHeight] = useState();\n  const [totalPages, setTotalPages] = useState(1);\n\n  const { showNotification, NotificationComponent } = useCustomNotification();\n  const { selectedMovies, selectMovie, deleteMovie } = useMovies();\n  const {\n    savedMovies,\n    removeMovieFromSaved,\n    addMovieToSaved,\n    savedMoviesLoading,\n  } = useSavedMovies();\n\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page },\n  });\n\n  useEffect(() => {\n    if (data?.getSavedMovies?.results?.length > 0) {\n      setTotalPages(data?.getSavedMovies?.totalPages || 1);\n\n      setMoviesList(prevState => {\n        return data.getSavedMovies.results.map(newMovie => {\n          const oldMovie = prevState.find(movie => movie.id === newMovie.id);\n          return {\n            ...newMovie,\n            image: oldMovie ? oldMovie.image : newMovie.image,\n          };\n        });\n      });\n    } else setMoviesList([]);\n  }, [data]);\n\n  useEffect(() => {\n    // Dynamically find the header and calculate its height\n    const headerElement = document.querySelector(\"header\");\n    const footerElement = document.querySelector(\"footer\");\n\n    if (headerElement) {\n      const headerHeight = headerElement.offsetHeight;\n      const footerHeight = footerElement.offsetHeight;\n      setBoxMinHeight(`calc(100vh - ${headerHeight + footerHeight}px)`);\n    }\n  }, []);\n\n  const paginationHandler = (event, page) => {\n    setPage(page);\n    setTimeout(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\",\n      });\n    }, 100);\n  };\n\n  const onCloseConfirmModal = () => {\n    setMovieId(\"\");\n  };\n  const selectMovieHandler = movie => {\n    const length = selectedMovies.length;\n    const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n    switch (true) {\n      case !isNewMovie:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_already_selected\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      case length >= SELECTED_MOVIES_LIMIT:\n        showNotification(\n          <FormattedMessage id=\"notification.list_limit_reached\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_added_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    selectMovie(movie);\n  };\n\n  const deleteMovieHandler = movie => {\n    switch (true) {\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    deleteMovie(movie);\n  };\n\n  const removeFavoriteMovie = async movie => {\n    const moviesLength = savedMovies.length - 1;\n    const result = await removeMovieFromSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in removing movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      if (moviesLength % 12 === 0 && page > 1) {\n        setPage(prevPage => prevPage - 1);\n      }\n      setTimeout(() => {\n        refetch();\n      }, 100);\n\n      showNotification(\n        <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const addFavoriteMovie = async movie => {\n    const result = await addMovieToSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in saving movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      refetch();\n      showNotification(\n        <FormattedMessage id=\"notification.movie_add_to_favorite_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  if (error) {\n    console.log(`error in favorite page: ${error}`);\n    return <ServerError />;\n  }\n\n  return (\n    <Box\n      sx={{\n        minHeight: boxMinHeight,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: 3,\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      {NotificationComponent}\n      <MovieDetailModal\n        user={state.user || null}\n        title={movieId}\n        movieId={movieId}\n        setMovieCardIsLoading={setMovieCardIsLoading}\n        open={!!movieId}\n        onClose={onCloseConfirmModal}\n        selectedMovies={selectedMovies}\n        selectMovie={selectMovieHandler}\n        deleteMovie={deleteMovieHandler}\n        removeFavoriteMovie={removeFavoriteMovie}\n        addFavoriteMovie={addFavoriteMovie}\n        savedMovies={savedMovies}\n        savedMoviesLoading={savedMoviesLoading}\n      />\n\n      <Grid item xs={12} md={8} sx={{ width: \"100%\" }}>\n        <Paper sx={{ padding: 2, minHeight: \"55vh\" }}>\n          <Box sx={{ flexGrow: 1, marginBottom: \"16px\" }}>\n            {loading && renderSkeletons({ favoriteMode: true })}\n            {moviesList && (\n              <Grid container spacing={2}>\n                {moviesList.map((movie, index) => (\n                  <Grid key={movie.id} item xs={12} md={3} lg={2}>\n                    <motion.div\n                      className=\"portfolio__item\"\n                      variants={framerListVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      custom={index}\n                    >\n                      <MovieCard\n                        movie={movie}\n                        movieCardIsLoading={movieCardIsLoading}\n                        openMovieDetailsById={setMovieId}\n                        selected={selectedMovies.find(\n                          ({ id }) => id === movie.id\n                        )}\n                        favorites={savedMovies.find(\n                          ({ id, movieId }) => movie.id === movieId\n                        )}\n                        isPreviewMode\n                      />\n                    </motion.div>\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </Box>\n          {moviesList.length > 0 && (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <Paginator\n                totalPages={totalPages}\n                page={page}\n                paginationHandler={paginationHandler}\n              />\n            </Box>\n          )}\n        </Paper>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Favorites;\n","import { Grid, Skeleton } from \"@mui/material\";\n\nconst renderSkeletons = ({ favoriteMode = false }) => {\n  return (\n    <Grid container spacing={2}>\n      {Array.from(new Array(8)).map((_, index) => (\n        <Grid\n          key={index}\n          item\n          xs={12}\n          md={favoriteMode ? 3 : 4}\n          lg={favoriteMode ? 2 : 3}\n        >\n          <Skeleton variant=\"rectangular\" height={431} />\n          <Skeleton variant=\"text\" height={32} />\n          <Skeleton variant=\"text\" height={32} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default renderSkeletons;\n"],"names":["SELECTED_MOVIES_LIMIT","useMovies","selectedMovies","setSelectedMovies","useState","useLayoutEffect","savedSelectedMovies","getFromStorage","SELECTED_MOVIES_KEY","selectMovie","useCallback","movie","length","find","_ref","id","prevMovies","updatedMovies","saveToStorage","deleteMovie","prevState","filter","_ref2","GET_SAVED_MOVIES","gql","SAVE_MOVIE","REMOVE_MOVIE","useSavedMovies","state","useContext","AppContext","savedMoviesLoading","setSavedMoviesLoading","saveMovie","useMutation","loading","error","data","refetch","useQuery","variables","page","all","removeMovie","savedMovies","setSavedMovies","user","getSavedMovies","results","addMovieToSaved","async","movieId","_movie$genres","movieObj","title","releaseDate","image","genres","map","m","adult","backdropPath","originalLanguage","originalTitle","overview","popularity","video","voteAverage","voteCount","console","removeMovieFromSaved","movieIdCheck","String","Favorites","setMovieId","movieCardIsLoading","setMovieCardIsLoading","moviesList","setMoviesList","setPage","boxMinHeight","setBoxMinHeight","totalPages","setTotalPages","showNotification","NotificationComponent","useCustomNotification","useEffect","_data$getSavedMovies","_data$getSavedMovies$","_data$getSavedMovies2","newMovie","oldMovie","headerElement","document","querySelector","footerElement","headerHeight","offsetHeight","footerHeight","log","_jsx","ServerError","_jsxs","Box","sx","minHeight","display","flexDirection","alignItems","padding","backgroundColor","children","MovieDetailModal","open","onClose","onCloseConfirmModal","FormattedMessage","vertical","horizontal","removeFavoriteMovie","moviesLength","prevPage","setTimeout","addFavoriteMovie","Grid","item","xs","md","width","Paper","flexGrow","marginBottom","renderSkeletons","favoriteMode","container","spacing","index","lg","motion","div","className","variants","framerListVariants","initial","animate","custom","MovieCard","openMovieDetailsById","selected","favorites","_ref3","isPreviewMode","justifyContent","Paginator","paginationHandler","event","window","scrollTo","top","behavior","Array","from","_","Skeleton","variant","height"],"sourceRoot":""}